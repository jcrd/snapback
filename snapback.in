#!/bin/bash

# This project is licensed under the MIT License (see LICENSE).

set -euo pipefail

readonly VERSION=@VERSION

readonly config='/etc/snapback.conf'

usage() {
    echo 'usage: snapback [-hrv]

Enable with `systemctl enable snapback.timer`.

options:
    -h  Show help message
    -r  Remove subvolumes and backups
    -v  Show version'
}

check_dir() {
    if [[ ! -d "$1" ]]; then
        echo "$1 does not exist" >&2
        exit 1
    fi
}

create_subvol() {
    if [[ ! -d "$1" ]]; then
        btrfs subvolume create "$1"
    fi
}

snapshot() {
    backdir="$1/.snapback"

    check_dir "$1"
    create_subvol "$backdir"

    name="$(date +%F)"

    if [[ ! -d "$backdir/$name" ]]; then
        btrfs subvolume snapshot -r "$1" "$backdir/$name"
    fi
}

backup() {
    backdir="$1/.snapback"
    name="$(date +%F)"
    prev="$(date -d "$name -1 days" +%F)"

    check_dir "$backdir/$name"
    create_subvol "$2"

    if [[ -d "$2/$name" ]]; then
        return
    fi

    if [[ -d "$backdir/$prev" && -d "$2/$prev" ]]; then
        echo 'btrfs: sending incremental stream...'
        btrfs send -p "$backdir/$prev" "$backdir/$name" | btrfs receive "$2"
    else
        echo 'btrfs: sending subvolume...'
        btrfs send "$backdir/$name" | btrfs receive "$2"
    fi
}

clean() {
    check_dir "$1"

    if [[ ! "${2-}" =~ ^[1-9]+$ ]]; then
        echo "$2 is not a valid integer" >&2
        exit 1
    fi

    for sub in $(ls "$1" | head -n "-$2"); do
        btrfs subvolume delete "$1/$sub"
    done
}

while getopts ':hrv' opt; do
    case "$opt" in
        h) usage; exit ;;
        r) remove=true ;;
        v) echo "$VERSION"; exit ;;
        *) usage >&2; exit 2
    esac
done

for dir in $(iniq "$config"); do
    while IFS='=' read -r k v; do
        case "$k" in
            backup)
                if ! ${remove-false}; then
                    snapshot "$dir"
                    backup "$dir" "$v"
                fi
                ;;
            keep_snapshots)
                clean "$dir/.snapback" "$v"
                ;;
            keep_backups)
                if backdir="$(iniq -p "$dir.backup" "$config")"; then
                    clean "$backdir" "$v"
                fi
                ;;
        esac
    done <<< "$(iniq -q -p "$dir" -f '%k=%v' "$config")"
done
